#pragma once
//============================================================================================================================================
// ## image ## (앞으로 계속 업데이트 된다.)
//============================================================================================================================================
#define MAGENTA	RGB(255, 0, 255)

class Image
{
public:
	enum IMAGE_LOAD_KIND
	{
		LOAD_RESOURCE = 0,		//리소스로 로딩
		LOAD_FILE,				//파일로 로딩
		LOAD_EMPTY,				//빈비트맵 로딩
		LOAD_END
	};

	typedef struct tagImage
	{
		DWORD		redID;					//리소스 ID
		HDC			hMemDC;					//메모리 DC
		HBITMAP		hBit;					//비트맵
		HBITMAP		hOBit;					//올드비트맵
		float		x;						//이미지 x좌표
		float		y;						//이미지 y좌표
		int			width;					//이미지 가로크기
		int			height;					//이미지 세로크기
		int			currentFrameX;			//현재 프레임 X
		int			currentFrameY;			//현재 프레임 Y
		int			maxFrameX;				//최대 X 프레임 갯수
		int			maxFrameY;				//최대 Y 프레임 갯수
		int			frameWidth;				//1프레임의 가로길이
		int			frameHeight;			//1프레임의 세로길이
		BYTE		loadType;				//이미지 로드타입

		tagImage()	//생성자 = 초기화
		{
			redID = 0;
			hMemDC = NULL;
			hBit = NULL;
			hOBit = NULL;
			x = 0;
			y = 0;
			width = 0;
			height = 0;
			currentFrameX = 0;
			currentFrameY = 0;
			maxFrameX = 0;
			maxFrameY = 0;
			frameWidth = 0;
			frameHeight = 0;
			loadType = LOAD_RESOURCE;
		}
	}IMAGE_INFO, *LPIMAGE_INFO;

private:
	LPIMAGE_INFO		_imageInfo;		//이미지 정보
	CHAR*				_fileName;		//이미지 이름
	BOOL				_isTrans;		//배경색 없앨거냐? (마젠타)
	COLORREF			_transColor;	//배경색 없앨 RGB (마젠타 = RGB(255, 0, 255))

	LPIMAGE_INFO		_blendImage;	//알파블랜드 이미지
	BLENDFUNCTION		_blendFunc;		//알파블랜드 기능

public:
	Image();
	~Image();

	//빈 비트맵으로 초기화
	HRESULT Init(int width, int height);
	//이미지 리소스로 초기화 (사용안함)
	HRESULT Init(DWORD resID, int width, int height, bool isTrans = FALSE, COLORREF transColor = RGB(0, 0, 0));
	//이미지 파일로 초기화 (주사용)
	HRESULT Init(const char* fileName, int width, int height, bool isTrans = FALSE, COLORREF transColor = RGB(0, 0, 0));
	HRESULT Init(const char* fileName, float x, float y, int width, int height, bool isTrans = FALSE, COLORREF transColor = RGB(0, 0, 0));
	//프레임 이미지 파일로 초기화 (주사용)
	HRESULT Init(const char* fileName, int width, int height, int frameX, int frameY, bool isTrans = TRUE, COLORREF transColor = MAGENTA);
	HRESULT Init(const char* fileName, float x, float y, int width, int height, int frameX, int frameY, bool isTrans = TRUE, COLORREF transColor = MAGENTA);


	//알파블랜드 초기화
	HRESULT InitForAlphaBlend(void);




	//해제
	void Release(void);


	//============================================================================================================================================
	// ## 일반 렌더 ##
	//============================================================================================================================================

	void Render(HDC hdc, int destX = 0, int destY = 0);
	void Render(HDC hdc, int destX, int destY, int sourX, int sourY, int sourW, int sourH);

	//============================================================================================================================================
	// ## 알파렌더 ##
	//============================================================================================================================================
	void AlphaRender(HDC hdc, BYTE alpha);
	void AlphaRender(HDC hdc, int destX, int destY, BYTE alpha);
	void AlphaRender(HDC hdc, int destX, int destY, int sourX, int sourY, int sourW, int sourH, BYTE alpha);
	//============================================================================================================================================
	// ## 프레임렌더 ##
	//============================================================================================================================================
	void FrameRender(HDC hdc, int destX, int destY);
	void FrameRender(HDC hdc, int destX, int destY, int currentFrameX, int currentFrameY);
	void FrameRender(HDC hdc, int destX, int destY, int sourW, int sourH, int currentFrameX, int currentFrameY);
	//=============================================================
	//	## 루프렌더 ##
	//=============================================================
	void loopRender(HDC hdc, const LPRECT drawArea, int offsetX, int offsetY);
	void loopAlphaRender(HDC hdc, const LPRECT drawArea, int offsetX, int offsetY, BYTE alpha);


	//============================================================================================================================================
	// ## inline ## ( 인라인 함수들 - 겟터, 셋터 )
	//===========================================================================================================================================
	//DC 얻기
	inline HDC GetMemDC(void) { return _imageInfo->hMemDC; }

	//이미지 x 좌표
	inline float GetX(void) { return _imageInfo->x; }
	inline void SetX(float x) { _imageInfo->x = x; }

	//이미지 y 좌표
	inline float GetY(void) { return _imageInfo->y; }
	inline void SetY(float y) { _imageInfo->y = y; }

	//이미지 센터 좌표
	inline void SetCenter(float x, float y)
	{
		_imageInfo->x = x - (_imageInfo->width / 2);
		_imageInfo->y = y - (_imageInfo->height / 2);
	}

	//이미지 가로, 세로 크기
	inline int GetWidth(void) { return _imageInfo->width; }
	inline int GetHeight(void) { return _imageInfo->height; }

	//바운딩 박스(충돌용 렉트)
	inline RECT boudingBox(void)
	{
		RECT rc = { (int)_imageInfo->x, (int)_imageInfo->y,
		(int)_imageInfo->x + _imageInfo->width,
		(int)_imageInfo->y + _imageInfo->height };

		return rc;
	}
	inline RECT boudingBoxWithFrame(void)
	{
		RECT rc = { (int)_imageInfo->x, (int)_imageInfo->y,
			(int)_imageInfo->x + _imageInfo->frameWidth,
			(int)_imageInfo->y + _imageInfo->frameHeight };

		return rc;
	}

	//프레임 x
	inline int GetFrameX(void) { return _imageInfo->currentFrameX; }
	inline void SetFrameX(int frameX)
	{
		_imageInfo->currentFrameX = frameX;
		if (frameX > _imageInfo->maxFrameX)
		{
			_imageInfo->currentFrameX = _imageInfo->maxFrameX;
		}
	}

	//프레임 y
	inline int GetFrameY(void) { return _imageInfo->currentFrameY; }
	inline void SetFrameY(int frameY)
	{
		_imageInfo->currentFrameY = frameY;
		if (frameY > _imageInfo->maxFrameY)
		{
			_imageInfo->currentFrameY = _imageInfo->maxFrameY;
		}
	}

	//이미지 한프레임의 가로, 세로 크기
	inline int GetFrameWidth(void) { return _imageInfo->frameWidth; }
	inline int GetFrameHeight(void) { return _imageInfo->frameHeight; }

	//맥스 프레임 x, y
	inline int GetMaxFrameX(void) { return _imageInfo->maxFrameX; }
	inline int GetmaxFrameY(void) { return _imageInfo->maxFrameY; }
};